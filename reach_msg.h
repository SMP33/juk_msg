// Generated by gencpp from file juk_msg/reach_msg.msg
// DO NOT EDIT!


#ifndef JUK_MSG_MESSAGE_REACH_MSG_H
#define JUK_MSG_MESSAGE_REACH_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace juk_msg
{
template <class ContainerAllocator>
struct reach_msg_
{
  typedef reach_msg_<ContainerAllocator> Type;

  reach_msg_()
    : lat(0.0)
    , lng(0.0)
    , alt(0.0)
    , quality(0)
    , time_Y(0)
    , time_M(0)
    , time_D(0)
    , time_h(0)
    , time_m(0)
    , time_s(0)  {
    }
  reach_msg_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lng(0.0)
    , alt(0.0)
    , quality(0)
    , time_Y(0)
    , time_M(0)
    , time_D(0)
    , time_h(0)
    , time_m(0)
    , time_s(0)  {
  (void)_alloc;
    }



   typedef float _lat_type;
  _lat_type lat;

   typedef float _lng_type;
  _lng_type lng;

   typedef float _alt_type;
  _alt_type alt;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint32_t _time_Y_type;
  _time_Y_type time_Y;

   typedef uint32_t _time_M_type;
  _time_M_type time_M;

   typedef uint32_t _time_D_type;
  _time_D_type time_D;

   typedef uint32_t _time_h_type;
  _time_h_type time_h;

   typedef uint32_t _time_m_type;
  _time_m_type time_m;

   typedef uint32_t _time_s_type;
  _time_s_type time_s;





  typedef boost::shared_ptr< ::juk_msg::reach_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::juk_msg::reach_msg_<ContainerAllocator> const> ConstPtr;

}; // struct reach_msg_

typedef ::juk_msg::reach_msg_<std::allocator<void> > reach_msg;

typedef boost::shared_ptr< ::juk_msg::reach_msg > reach_msgPtr;
typedef boost::shared_ptr< ::juk_msg::reach_msg const> reach_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::juk_msg::reach_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::juk_msg::reach_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace juk_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'juk_msg': ['/home/pi/catkin_ws/src/juk_msg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::juk_msg::reach_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::juk_msg::reach_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::juk_msg::reach_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::juk_msg::reach_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::juk_msg::reach_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::juk_msg::reach_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::juk_msg::reach_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daccdb13c02789612046853a5739a2b4";
  }

  static const char* value(const ::juk_msg::reach_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdaccdb13c0278961ULL;
  static const uint64_t static_value2 = 0x2046853a5739a2b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::juk_msg::reach_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "juk_msg/reach_msg";
  }

  static const char* value(const ::juk_msg::reach_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::juk_msg::reach_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lat\n\
float32 lng\n\
float32 alt\n\
\n\
uint8 quality\n\
uint32 time_Y\n\
uint32 time_M\n\
uint32 time_D\n\
uint32 time_h\n\
uint32 time_m\n\
uint32 time_s\n\
\n\
";
  }

  static const char* value(const ::juk_msg::reach_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::juk_msg::reach_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lng);
      stream.next(m.alt);
      stream.next(m.quality);
      stream.next(m.time_Y);
      stream.next(m.time_M);
      stream.next(m.time_D);
      stream.next(m.time_h);
      stream.next(m.time_m);
      stream.next(m.time_s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reach_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::juk_msg::reach_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::juk_msg::reach_msg_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<float>::stream(s, indent + "  ", v.lng);
    s << indent << "alt: ";
    Printer<float>::stream(s, indent + "  ", v.alt);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "time_Y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_Y);
    s << indent << "time_M: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_M);
    s << indent << "time_D: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_D);
    s << indent << "time_h: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_h);
    s << indent << "time_m: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_m);
    s << indent << "time_s: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_s);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JUK_MSG_MESSAGE_REACH_MSG_H
