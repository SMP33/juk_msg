// Generated by gencpp from file juk_msg/juk_position_data_msg.msg
// DO NOT EDIT!


#ifndef JUK_MSG_MESSAGE_JUK_POSITION_DATA_MSG_H
#define JUK_MSG_MESSAGE_JUK_POSITION_DATA_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace juk_msg
{
template <class ContainerAllocator>
struct juk_position_data_msg_
{
  typedef juk_position_data_msg_<ContainerAllocator> Type;

  juk_position_data_msg_()
    : lat(0.0)
    , lng(0.0)
    , alt(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , course(0.0)
    , dist_to_target(0.0)
    , stable_time(0.0)  {
    }
  juk_position_data_msg_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lng(0.0)
    , alt(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , course(0.0)
    , dist_to_target(0.0)
    , stable_time(0.0)  {
  (void)_alloc;
    }



   typedef float _lat_type;
  _lat_type lat;

   typedef float _lng_type;
  _lng_type lng;

   typedef float _alt_type;
  _alt_type alt;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _course_type;
  _course_type course;

   typedef float _dist_to_target_type;
  _dist_to_target_type dist_to_target;

   typedef float _stable_time_type;
  _stable_time_type stable_time;





  typedef boost::shared_ptr< ::juk_msg::juk_position_data_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::juk_msg::juk_position_data_msg_<ContainerAllocator> const> ConstPtr;

}; // struct juk_position_data_msg_

typedef ::juk_msg::juk_position_data_msg_<std::allocator<void> > juk_position_data_msg;

typedef boost::shared_ptr< ::juk_msg::juk_position_data_msg > juk_position_data_msgPtr;
typedef boost::shared_ptr< ::juk_msg::juk_position_data_msg const> juk_position_data_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::juk_msg::juk_position_data_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace juk_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'juk_msg': ['/home/ubuntu/catkin_ws/src/juk-msg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::juk_msg::juk_position_data_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::juk_msg::juk_position_data_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::juk_msg::juk_position_data_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fb0457d75376c9f81ea852d5e1a56b8";
  }

  static const char* value(const ::juk_msg::juk_position_data_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fb0457d75376c9fULL;
  static const uint64_t static_value2 = 0x81ea852d5e1a56b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "juk_msg/juk_position_data_msg";
  }

  static const char* value(const ::juk_msg::juk_position_data_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lat\n"
"float32 lng\n"
"float32 alt\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 course\n"
"float32 dist_to_target\n"
"float32 stable_time\n"
;
  }

  static const char* value(const ::juk_msg::juk_position_data_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lng);
      stream.next(m.alt);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.course);
      stream.next(m.dist_to_target);
      stream.next(m.stable_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct juk_position_data_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::juk_msg::juk_position_data_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::juk_msg::juk_position_data_msg_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<float>::stream(s, indent + "  ", v.lng);
    s << indent << "alt: ";
    Printer<float>::stream(s, indent + "  ", v.alt);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "course: ";
    Printer<float>::stream(s, indent + "  ", v.course);
    s << indent << "dist_to_target: ";
    Printer<float>::stream(s, indent + "  ", v.dist_to_target);
    s << indent << "stable_time: ";
    Printer<float>::stream(s, indent + "  ", v.stable_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JUK_MSG_MESSAGE_JUK_POSITION_DATA_MSG_H
